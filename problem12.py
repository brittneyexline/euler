#!/usr/local/bin/python
#coding: utf8
import math

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

def next_triangle_number (current, n):
	return current + n

def find_factors (n):
	factors = [1, n]
	for i in range(2, int(math.sqrt(n) + 1)):
		if (n % i == 0):
			factors.append(i)
			if (n/i != i):
				factors.append(n/i)
	return factors

iter = 1
triangle = 0
max_factors = 0

while (max_factors < 500):
	triangle = next_triangle_number(triangle, iter)
	f = find_factors(triangle)
	print 'iter: ' + str(iter) + ', triangle: ' + str(triangle) + ', factors: ' + str(len(f))
	if (len(f) > max_factors):
		max_factors = len(f)
	iter += 1

print 'iter: ' + str(iter)
print 'triangle: ' + str(triangle)